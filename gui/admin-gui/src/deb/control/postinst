#!/bin/sh
# postinst script for #PACKAGE#
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

. /usr/share/debconf/confmodule

db_creadentials() {
    echo " >>> db_creadentials"
    db_get odn-midpoint/pgsql_db_user
    DB_USER=$RET

    db_get odn-midpoint/pgsql_db_password
    DB_PASS=$RET
    echo " <<< db_creadentials"
}


db_up() {
   echo " >>> db_up"

  #Check if postgresql is started
  /etc/init.d/postgresql status > /dev/null || /etc/init.d/postgresql start >/dev/null 2>&1

  echo -n "INFO: Waiting for postgresql to be up..."
  CPT=0
  TIMEOUT=60
  while ! su - postgres -c "psql -q --output /dev/null -c \"SELECT COUNT(*) FROM pg_catalog.pg_authid\"" >/dev/null 2>&1
  do
    echo -n "."
    sleep 1
    CPT=$((${CPT}+1))
    if [ ${CPT} -eq ${TIMEOUT} ]
    then
      echo -e "\nERROR: Connection to PostgreSQL has not been established before timeout. Exiting"
      exit 1
    fi
  done
  echo " Done"
  echo " <<< db_up"
}


db_configure() {
    echo " >>> db_configure dbname: $1,  usrname: $2 , pass: ******"
    dbname="$1"
    usrname="$2"
    pass="$3"
    
    CHK_PG_DB=$(su - postgres -c "psql -t -c \"select count(1) from pg_catalog.pg_database where datname = '${dbname}'\"")
    CHK_PG_USER=$(su - postgres -c "psql -t -c \"select count(1) from pg_user where usename = '${usrname}'\"")

    if [ ${CHK_PG_USER} -eq 0 ]
        then
        echo -n "INFO: Creating PostgreSQL user..."
        su - postgres -c "psql -q -c \"CREATE USER ${usrname} WITH PASSWORD '${DB_PASS}'\"" 
        echo "Done"
    fi
  
    if [ ${CHK_PG_DB} -eq 0 ]
    then
        echo -n "INFO: Creating PostgreSQL database..."
        su - postgres -c "createdb  -O ${usrname} ${dbname}" 
        su - postgres -c "psql -d ${dbname}" < \
        /usr/share/odn-midpoint/db/pgsql/postgresql.sql  >> /usr/share/odn-midpoint/logs/sql-install.log 2>&1
                      
        su - postgres -c "psql -q -d ${dbname} -c \"GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${usrname};\"" 
        su - postgres -c "psql -q -d ${dbname} -c \"GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${usrname};\"" 
        echo " Done" 
    fi

    # update config
    sed --in-place \
    -e "s/<jdbcUsername>.*/<jdbcUsername>$DB_USER<\/jdbcUsername>/" \
    -e "s/<jdbcPassword>.*/<jdbcPassword>$DB_PASS<\/jdbcPassword>/" \
    /var/lib/midpoint.home/config.xml
    echo " <<< db_configure"
}


create_user() {
   echo " >>> create_user"

  if ! id odn-midpoint > /dev/null 2>&1 ; then
    adduser --system --no-create-home --disabled-password --home /usr/share/odn-midpoint odn-midpoint --shell /bin/false
  fi
  echo " <<< create_user"
}

fix_perms() {
    echo " >>> fix_perms"

    chmod +x  /etc/init.d/odn-midpoint
    chown  odn-midpoint /var/cache/odn-midpoint
    chown  odn-midpoint /var/tmp/odn-midpoint
    chown  odn-midpoint /var/log/odn-midpoint
    chown  odn-midpoint /var/lib/midpoint.home
    chown -R odn-midpoint /usr/share/odn-midpoint
    echo " <<< fix_perms"
}


set_midpoint() {
  echo ">> set_midpoint hostname: $1"
  HOSTNAME=$1
    
  # set domain name  
  sed --in-place \
        -e "s/\$HOSTNAME/$HOSTNAME/" \
        /usr/share/odn-midpoint/midpoint/WEB-INF/ctx-web-security.xml
  
    
  echo "<< set_midpoint"
}


service_start() {
    echo " >>> service_start"

    update-rc.d odn-midpoint defaults

    if [ -x "`which invoke-rc.d 2>/dev/null`" ]; then
        invoke-rc.d odn-midpoint restart || true
    else
        service odn-midpoint restart || true
    fi
    
    echo " <<< service_start"
}

get_hostname() {
    HOSTNAME=`hostname --all-fqdns`
    if [ -z ${HOSTNAME}  ]
    then
        HOSTNAME=`hostname`
    fi

    if [ -z ${HOSTNAME}  ] 
    then
        HOSTNAME="localhost"
    fi

    HOSTNAME="$(echo "${HOSTNAME}" | tr -d '[[:space:]]')"    
    # return hostname
    echo "$HOSTNAME"
}

case "$1" in
    configure)
        hostname=$(get_hostname)
        create_user
        fix_perms
        db_up
        db_creadentials
        db_configure midpoint $DB_USER $DB_PASS
        set_midpoint $hostname
        service_start
        db_stop
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0